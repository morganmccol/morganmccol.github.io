{"hash":"2125cfe4ebfef663df807ecdf5ac801675177972","data":{"tag":{"title":"tutorial","belongsTo":{"edges":[{"node":{"title":"Sketch to GitHub","path":"/sketch-to-git-hub/","date":"16. June 2020","timeToRead":2,"description":"","content":"<p><strong>Sketch to GitHub</strong> was a project I created to apply version control to individual Sketch files. This allowed us to handle merge conflicts and prevent file overrides when sharing files between multiple people.</p>\n<p>Version control was added through the use of two custom Bash scripts: one for downloading files from a GitHub repository and another for uploading files to the same repository.</p>\n<h2 id=\"downloading-sketch-files\"><a href=\"#downloading-sketch-files\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Downloading Sketch Files</h2>\n<p>This script used a <code>/sketch</code> folder inside the repository to rebuild and store updated Sketch files after download. It ran automatically using Git Hooks for <code>post-merge</code> and <code>post-pull</code>.</p>\n<p>The following workflow was performed:</p>\n<ol>\n<li>Remove all existing <code>.sketch</code> files from folder</li>\n<li>Export each Sketch directory from repository to its own <code>.zip</code> file</li>\n<li>Convert <code>.zip</code> file to <code>.sketch</code> file</li>\n<li>Remove leftover <code>.zip</code> files</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\n<span class=\"token assign-left variable\">directory</span><span class=\"token operator\">=</span><span class=\"token string\">\"sketch\"</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$directory</span>/\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"removing previous sketch files ...\"</span>\n<span class=\"token function\">rm</span> -rf -- *.sketch\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"exporting new sketch files ...\"</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file</span> <span class=\"token keyword\">in</span> *\n<span class=\"token keyword\">do</span>\n  <span class=\"token assign-left variable\">zip_file</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">${file<span class=\"token operator\">%</span>.*}</span>\"</span>\n\n  <span class=\"token comment\"># export sketch directory to zip file</span>\n  <span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$zip_file</span>/\n  <span class=\"token function\">zip</span> <span class=\"token variable\">$zip_file</span>.zip -r <span class=\"token builtin class-name\">.</span>\n\n  <span class=\"token comment\"># convert zip file to sketch file</span>\n  <span class=\"token function\">cp</span> <span class=\"token variable\">$zip_file</span>.zip <span class=\"token punctuation\">..</span>/<span class=\"token variable\">$zip_file</span>.sketch\n\n  <span class=\"token comment\"># remove files no longer needed</span>\n  <span class=\"token function\">rm</span> -rf <span class=\"token variable\">$zip_file</span>.zip\n  <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"done!\"</span></code></pre>\n<h2 id=\"uploading-sketch-files\"><a href=\"#uploading-sketch-files\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Uploading Sketch Files</h2>\n<p>This script used a <code>/sketch</code> folder inside the repository to prepare Sketch files for version control prior to upload. It would run automatically on unstaged files using a Git Hook for <code>pre-commit</code>.</p>\n<p>The following workflow was performed:</p>\n<ol>\n<li>Check for modified <code>.sketch</code> files and remove their associated Sketch directory</li>\n<li>Convert modified <code>.sketch</code> file to <code>.zip</code> file</li>\n<li>Export <code>.zip</code> file to Sketch directory</li>\n<li>Remove leftover <code>.zip</code> files, images previews, and text previews</li>\n<li>Prettify <code>.json</code> files for better version control</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\n<span class=\"token assign-left variable\">directory</span><span class=\"token operator\">=</span><span class=\"token string\">\"sketch\"</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$directory</span>/\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"checking for modified sketch files ...\"</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">modified_sketch_file</span> <span class=\"token keyword\">in</span> *.sketch\n<span class=\"token keyword\">do</span>\n  <span class=\"token assign-left variable\">sketch_file</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">basename</span> $modified_sketch_file .sketch<span class=\"token variable\">)</span></span>\n\n  <span class=\"token comment\"># remove associated file directories</span>\n  <span class=\"token function\">rm</span> -rf -- <span class=\"token variable\">$sketch_file</span>/\n\n  <span class=\"token comment\"># convert sketch file to .zip file</span>\n  <span class=\"token function\">cp</span> <span class=\"token variable\">$sketch_file</span>.sketch <span class=\"token variable\">$sketch_file</span>.zip\n\n  <span class=\"token comment\"># export zip file to Sketch directory</span>\n  <span class=\"token function\">unzip</span> -o <span class=\"token variable\">$sketch_file</span>.zip -d <span class=\"token variable\">$sketch_file</span>/\n\n  <span class=\"token comment\"># remove files no longer needed</span>\n  <span class=\"token function\">rm</span> -rf <span class=\"token variable\">$sketch_file</span>.zip\n  <span class=\"token function\">rm</span> -rf <span class=\"token variable\">$sketch_file</span>/previews/\n  <span class=\"token function\">rm</span> -rf <span class=\"token variable\">$sketch_file</span>/text-previews/\n<span class=\"token keyword\">done</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"cleaning up json files ...\"</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">modified_json_file</span> <span class=\"token keyword\">in</span> /*.json\n<span class=\"token keyword\">do</span>\n  <span class=\"token assign-left variable\">json_file</span><span class=\"token operator\">=</span><span class=\"token variable\">${modified_json_file<span class=\"token operator\">/</span>sketch<span class=\"token operator\">/</span>.}</span>\n\n  <span class=\"token comment\"># prettify json files</span>\n  python3 -m json.tool --sort-keys <span class=\"token string\">\"<span class=\"token variable\">$json_file</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$json_file</span>\"</span>.pretty\n  <span class=\"token function\">mv</span> <span class=\"token string\">\"<span class=\"token variable\">$json_file</span>\"</span>.pretty <span class=\"token string\">\"<span class=\"token variable\">$json_file</span>\"</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"done!\"</span></code></pre>\n"}}]}}},"context":{}}